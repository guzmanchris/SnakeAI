from agents import *
import pygame as game
from player import *
from main import hamiltonian_cycle
import time


class SnakeEnvironment(Environment):
    width = 400
    height = 400
    step = 40

    def __init__(self, width, height, step, agent):
        """
        :param width: The width (in pixels) of the screen window.
        :param height: The height (in pixels) of the screen window.
        :param step: The number of pixels the snake travels with each action. It should be a factor of both width and
        height
        """
        super(SnakeEnvironment, self).__init__()

        self.width = width
        self.height = height
        self.step = step
        self.agent = agent

        # Initialize pygame
        game.init()
        self.surface = game.display.set_mode((width, height), game.HWSURFACE)
        game.display.set_caption('Snake AI')
        self.background_color = (0, 0, 0)
        self.surface.fill(self.background_color)

        # Draw grid lines
        line_color = (100, 100, 100)
        for i in range(step, width, step):
            game.draw.line(self.surface, line_color, (0, i), (width, i))
        for j in range(step, height, step):
            game.draw.line(self.surface, line_color, (j, 0), (j, height))

        # Draw snake
        x, y = self.agent.head.coordinate
        self.snake_color = (79, 132, 55)
        game.draw.rect(self.surface, self.snake_color, (x, y, self.step, self.step))

        # Update Display
        game.display.flip()

    def percept(self, agent):
        valid_steps = []
        x, y = agent.head.coordinate

        north = (x, y - self.step)
        west = (x - self.step, y)
        south = (x, y + self.step)
        east = (x + self.step, y)

        if y - self.step > 0 and not agent.snake.get(north, False):
            valid_steps.append(north)
        if x - self.step > 0 and not agent.snake.get(west, False):
            valid_steps.append(west)
        if y + self.step < self.height and not agent.snake.get(south, False):
            valid_steps.append(south)
        if x + self.step < self.width and not agent.snake.get(east, False):
            valid_steps.append(east)

        return valid_steps

    def execute_action(self, agent, action):
        # Add new head
        self.agent.head.next = Body(action, None)
        self.agent.head = self.agent.head.next
        self.agent.snake[action] = self.agent.head
        self.draw_rect(*action)

        # Remove tail from body
        try:
            del self.agent.snake[self.agent.tail.coordinate]
            self.delete_rect(*self.agent.tail.coordinate)
            prev_tail = self.agent.tail
            self.agent.tail = self.agent.tail.next
            prev_tail.coordinate = None
            prev_tail.next = None
            prev_tail = None
        except KeyError:
            # The coordinate of tail is None (snake body only of length 1)
            self.delete_rect(*self.agent.tail.next.coordinate)
            self.agent.tail.next = self.agent.head
            del self.agent.snake[self.agent.tail.next.coordinate]

        game.display.flip()

    def draw_rect(self, x, y):
        game.draw.rect(self.surface, self.agent.snake_color, (x, y, self.step, self.step))

    def delete_rect(self, x, y):
        game.draw.rect(self.surface, self.background_color, (x, y, self.step, self.step))


if __name__ == '__main__':
    environment = SnakeEnvironment(400, 400, 40, Snake())
    path = hamiltonian_cycle()

    for action in path:
        if action == (0, 0):
            continue
        environment.execute_action(environment.agent, action)
        time.sleep(100 / 1000)
